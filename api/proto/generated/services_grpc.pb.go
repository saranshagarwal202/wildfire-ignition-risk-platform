// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: services.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrchestratorService_CreateRiskAssessmentJob_FullMethodName = "/riskplatform.OrchestratorService/CreateRiskAssessmentJob"
	OrchestratorService_GetJobStatus_FullMethodName            = "/riskplatform.OrchestratorService/GetJobStatus"
)

// OrchestratorServiceClient is the client API for OrchestratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The main coordinator service
type OrchestratorServiceClient interface {
	CreateRiskAssessmentJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error)
	GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*GetJobStatusResponse, error)
}

type orchestratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestratorServiceClient(cc grpc.ClientConnInterface) OrchestratorServiceClient {
	return &orchestratorServiceClient{cc}
}

func (c *orchestratorServiceClient) CreateRiskAssessmentJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateJobResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_CreateRiskAssessmentJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*GetJobStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobStatusResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_GetJobStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestratorServiceServer is the server API for OrchestratorService service.
// All implementations must embed UnimplementedOrchestratorServiceServer
// for forward compatibility.
//
// The main coordinator service
type OrchestratorServiceServer interface {
	CreateRiskAssessmentJob(context.Context, *CreateJobRequest) (*CreateJobResponse, error)
	GetJobStatus(context.Context, *GetJobStatusRequest) (*GetJobStatusResponse, error)
	mustEmbedUnimplementedOrchestratorServiceServer()
}

// UnimplementedOrchestratorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrchestratorServiceServer struct{}

func (UnimplementedOrchestratorServiceServer) CreateRiskAssessmentJob(context.Context, *CreateJobRequest) (*CreateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRiskAssessmentJob not implemented")
}
func (UnimplementedOrchestratorServiceServer) GetJobStatus(context.Context, *GetJobStatusRequest) (*GetJobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStatus not implemented")
}
func (UnimplementedOrchestratorServiceServer) mustEmbedUnimplementedOrchestratorServiceServer() {}
func (UnimplementedOrchestratorServiceServer) testEmbeddedByValue()                             {}

// UnsafeOrchestratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchestratorServiceServer will
// result in compilation errors.
type UnsafeOrchestratorServiceServer interface {
	mustEmbedUnimplementedOrchestratorServiceServer()
}

func RegisterOrchestratorServiceServer(s grpc.ServiceRegistrar, srv OrchestratorServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrchestratorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrchestratorService_ServiceDesc, srv)
}

func _OrchestratorService_CreateRiskAssessmentJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).CreateRiskAssessmentJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_CreateRiskAssessmentJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).CreateRiskAssessmentJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_GetJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).GetJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_GetJobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).GetJobStatus(ctx, req.(*GetJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrchestratorService_ServiceDesc is the grpc.ServiceDesc for OrchestratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrchestratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "riskplatform.OrchestratorService",
	HandlerType: (*OrchestratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRiskAssessmentJob",
			Handler:    _OrchestratorService_CreateRiskAssessmentJob_Handler,
		},
		{
			MethodName: "GetJobStatus",
			Handler:    _OrchestratorService_GetJobStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

const (
	InfrastructureService_GetAssetsInAOI_FullMethodName = "/riskplatform.InfrastructureService/GetAssetsInAOI"
)

// InfrastructureServiceClient is the client API for InfrastructureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service to fetch infrastructure data
type InfrastructureServiceClient interface {
	GetAssetsInAOI(ctx context.Context, in *GetAssetsRequest, opts ...grpc.CallOption) (*GetAssetsResponse, error)
}

type infrastructureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInfrastructureServiceClient(cc grpc.ClientConnInterface) InfrastructureServiceClient {
	return &infrastructureServiceClient{cc}
}

func (c *infrastructureServiceClient) GetAssetsInAOI(ctx context.Context, in *GetAssetsRequest, opts ...grpc.CallOption) (*GetAssetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssetsResponse)
	err := c.cc.Invoke(ctx, InfrastructureService_GetAssetsInAOI_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfrastructureServiceServer is the server API for InfrastructureService service.
// All implementations must embed UnimplementedInfrastructureServiceServer
// for forward compatibility.
//
// Service to fetch infrastructure data
type InfrastructureServiceServer interface {
	GetAssetsInAOI(context.Context, *GetAssetsRequest) (*GetAssetsResponse, error)
	mustEmbedUnimplementedInfrastructureServiceServer()
}

// UnimplementedInfrastructureServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInfrastructureServiceServer struct{}

func (UnimplementedInfrastructureServiceServer) GetAssetsInAOI(context.Context, *GetAssetsRequest) (*GetAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetsInAOI not implemented")
}
func (UnimplementedInfrastructureServiceServer) mustEmbedUnimplementedInfrastructureServiceServer() {}
func (UnimplementedInfrastructureServiceServer) testEmbeddedByValue()                               {}

// UnsafeInfrastructureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfrastructureServiceServer will
// result in compilation errors.
type UnsafeInfrastructureServiceServer interface {
	mustEmbedUnimplementedInfrastructureServiceServer()
}

func RegisterInfrastructureServiceServer(s grpc.ServiceRegistrar, srv InfrastructureServiceServer) {
	// If the following call pancis, it indicates UnimplementedInfrastructureServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InfrastructureService_ServiceDesc, srv)
}

func _InfrastructureService_GetAssetsInAOI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfrastructureServiceServer).GetAssetsInAOI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfrastructureService_GetAssetsInAOI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfrastructureServiceServer).GetAssetsInAOI(ctx, req.(*GetAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InfrastructureService_ServiceDesc is the grpc.ServiceDesc for InfrastructureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InfrastructureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "riskplatform.InfrastructureService",
	HandlerType: (*InfrastructureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAssetsInAOI",
			Handler:    _InfrastructureService_GetAssetsInAOI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

const (
	TopographyService_GetDemForAOI_FullMethodName = "/riskplatform.TopographyService/GetDemForAOI"
)

// TopographyServiceClient is the client API for TopographyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service to fetch topography data
type TopographyServiceClient interface {
	GetDemForAOI(ctx context.Context, in *GetDemRequest, opts ...grpc.CallOption) (*GetDemResponse, error)
}

type topographyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopographyServiceClient(cc grpc.ClientConnInterface) TopographyServiceClient {
	return &topographyServiceClient{cc}
}

func (c *topographyServiceClient) GetDemForAOI(ctx context.Context, in *GetDemRequest, opts ...grpc.CallOption) (*GetDemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDemResponse)
	err := c.cc.Invoke(ctx, TopographyService_GetDemForAOI_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopographyServiceServer is the server API for TopographyService service.
// All implementations must embed UnimplementedTopographyServiceServer
// for forward compatibility.
//
// Service to fetch topography data
type TopographyServiceServer interface {
	GetDemForAOI(context.Context, *GetDemRequest) (*GetDemResponse, error)
	mustEmbedUnimplementedTopographyServiceServer()
}

// UnimplementedTopographyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTopographyServiceServer struct{}

func (UnimplementedTopographyServiceServer) GetDemForAOI(context.Context, *GetDemRequest) (*GetDemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDemForAOI not implemented")
}
func (UnimplementedTopographyServiceServer) mustEmbedUnimplementedTopographyServiceServer() {}
func (UnimplementedTopographyServiceServer) testEmbeddedByValue()                           {}

// UnsafeTopographyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopographyServiceServer will
// result in compilation errors.
type UnsafeTopographyServiceServer interface {
	mustEmbedUnimplementedTopographyServiceServer()
}

func RegisterTopographyServiceServer(s grpc.ServiceRegistrar, srv TopographyServiceServer) {
	// If the following call pancis, it indicates UnimplementedTopographyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TopographyService_ServiceDesc, srv)
}

func _TopographyService_GetDemForAOI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopographyServiceServer).GetDemForAOI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopographyService_GetDemForAOI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopographyServiceServer).GetDemForAOI(ctx, req.(*GetDemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TopographyService_ServiceDesc is the grpc.ServiceDesc for TopographyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopographyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "riskplatform.TopographyService",
	HandlerType: (*TopographyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDemForAOI",
			Handler:    _TopographyService_GetDemForAOI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
